<?php

namespace {{ namespace }};

use {{ namespaceRepository }};

/**
 * Summary of {{ class }}Service
 */
class {{ class }}Service
{
    private $repo{{ class }};

    /**
     * Construtor da classe {{ class }}Service
     * @param {{ class }}RepositoryInterface $repo{{ class }}
     */
    public function __construct({{ class }}RepositoryInterface $repo{{ class }})
    {
        $this->repo{{ class }} = $repo{{ class }};
    }

    /**
     * Envia para o {{ class }}Repository os dados para criar uma nova instância de {{ class }}
     * @param array $data
     * @return \App\Models\{{ class }}
     */
    public function store(array $data)
    {
        return $this->repo{{ class }}->store($data);
    }

    /**
     * Retorna todas as instâncias de {{ class }} do banco de dados
     * @return array[\App\Models\{{ class }}]
     */
    public function getList()
    {
        return $this->repo{{ class }}->getList();
    }

    /**
     * Retorna uma instância de {{ class }} a partir do id informado
     * @param mixed $id
     * @return \App\Models\{{ class }}
     */
    public function get($id)
    {
        return $this->repo{{ class }}->get($id);
    }

    /**
     * Atualiza os dados de uma instância de {{ class }}
     * @param array $data
     * @param mixed $id
     * @return \App\Models\{{ class }}
     */
    public function update(array $data, $id)
    {
        return $this->repo{{ class }}->update($data, $id);
    }

    /**
     * Remove uma instância de {{ class }} do banco de dados
     * @param mixed $id
     * @return mixed
     */
    public function destroy($id)
    {
        return $this->repo{{ class }}->destroy($id);
    }
}
